# Environment variables go here, can be read by `python-dotenv` package:
#
#   `src/script.py`
#   ----------------------------------------------------------------
#    import dotenv
#
#    project_dir = os.path.join(os.path.dirname(__file__), os.pardir)
#    dotenv_path = os.path.join(project_dir, '.env')
#    dotenv.load_dotenv(dotenv_path)
#   ----------------------------------------------------------------
#
# DO NOT ADD THIS FILE TO VERSION CONTROL!

LOCAL_ROOT="$(git rev-parse --show-toplevel)"

# Create the .exclude symlink; if the symlink is included in the repo, installing via cookiecutter will fail.
[[ -f .exclude ]] || ln -sv .git/info/exclude .exclude

# conda activate {{cookiecutter.repo_name}}

# https://ericmjl.github.io/blog/2018/12/25/conda-hacks-for-data-science-efficiency/
env_file="${LOCAL_ROOT}/environment/environment.yml"
if [ -f $env_file ]; then
    # echo "environment.yml file found"
    ENV=$(head -n 1 $env_file | cut -f2 -d ' ')
else
    ENV=$(basename $LOCAL_ROOT)
fi

# Check if you are already in the environment
if [[ $PATH != *$ENV* ]]; then
    conda activate $ENV
    if [ $? -ne 0 ]; then
        echo "Conda env '$ENV' doesn't exist."
    fi
fi


# Get variable from environment or set it.
# Use PROJECTDIR.
export PROJECTDIR="${PROJECTDIR:-$LOCAL_ROOT}"
export DATADIR="${DATADIR:-${PROJECTDIR}/data}"
export CACHE="${CACHE:-${PROJECTDIR}/_cache}"
export PATH="$PROJECTDIR/scripts:$PATH"

# Use LOCAL_ROOT.
export TASKRC="${LOCAL_ROOT}/.taskrc"

export TIMETRACKER_PROJECT=({{cookiecutter.repo_name}})

echo "Ready!"

# END.
